""" Test keymaster helpers """
from unittest.mock import call, patch
from _pytest import config

import pytest
from pytest_homeassistant_custom_component.common import MockConfigEntry
from custom_components.keymaster.const import DOMAIN
from tests.const import CONFIG_DATA
from custom_components.keymaster.helpers import (
    _get_entities_to_remove,
    delete_lock_and_base_folder,
)


async def test_entities_to_remove(hass):
    """Test _get_entities_to_remove"""
    result = _get_entities_to_remove("frontdoor", "tests/yaml", range(1, 5), True)
    assert result == [
        "input_boolean.notify_frontdoor_1",
        "input_boolean.daterange_frontdoor_1",
        "input_boolean.smtwtfs_frontdoor_1",
        "input_boolean.enabled_frontdoor_1",
        "input_boolean.accesslimit_frontdoor_1",
        "input_boolean.reset_codeslot_frontdoor_1",
        "input_boolean.sun_frontdoor_1",
        "input_boolean.mon_frontdoor_1",
        "input_boolean.tue_frontdoor_1",
        "input_boolean.wed_frontdoor_1",
        "input_boolean.thu_frontdoor_1",
        "input_boolean.fri_frontdoor_1",
        "input_boolean.sat_frontdoor_1",
        "input_boolean.sun_inc_frontdoor_1",
        "input_boolean.mon_inc_frontdoor_1",
        "input_boolean.tue_inc_frontdoor_1",
        "input_boolean.wed_inc_frontdoor_1",
        "input_boolean.thu_inc_frontdoor_1",
        "input_boolean.fri_inc_frontdoor_1",
        "input_boolean.sat_inc_frontdoor_1",
        "input_datetime.end_date_frontdoor_1",
        "input_datetime.start_date_frontdoor_1",
        "input_datetime.sun_start_date_frontdoor_1",
        "input_datetime.sun_end_date_frontdoor_1",
        "input_datetime.mon_start_date_frontdoor_1",
        "input_datetime.mon_end_date_frontdoor_1",
        "input_datetime.tue_start_date_frontdoor_1",
        "input_datetime.tue_end_date_frontdoor_1",
        "input_datetime.wed_start_date_frontdoor_1",
        "input_datetime.wed_end_date_frontdoor_1",
        "input_datetime.thu_start_date_frontdoor_1",
        "input_datetime.thu_end_date_frontdoor_1",
        "input_datetime.fri_start_date_frontdoor_1",
        "input_datetime.fri_end_date_frontdoor_1",
        "input_datetime.sat_start_date_frontdoor_1",
        "input_datetime.sat_end_date_frontdoor_1",
        "input_number.accesscount_frontdoor_1",
        "input_text.frontdoor_name_1",
        "input_text.frontdoor_pin_1",
        "input_boolean.notify_frontdoor_2",
        "input_boolean.daterange_frontdoor_2",
        "input_boolean.smtwtfs_frontdoor_2",
        "input_boolean.enabled_frontdoor_2",
        "input_boolean.accesslimit_frontdoor_2",
        "input_boolean.reset_codeslot_frontdoor_2",
        "input_boolean.sun_frontdoor_2",
        "input_boolean.mon_frontdoor_2",
        "input_boolean.tue_frontdoor_2",
        "input_boolean.wed_frontdoor_2",
        "input_boolean.thu_frontdoor_2",
        "input_boolean.fri_frontdoor_2",
        "input_boolean.sat_frontdoor_2",
        "input_boolean.sun_inc_frontdoor_2",
        "input_boolean.mon_inc_frontdoor_2",
        "input_boolean.tue_inc_frontdoor_2",
        "input_boolean.wed_inc_frontdoor_2",
        "input_boolean.thu_inc_frontdoor_2",
        "input_boolean.fri_inc_frontdoor_2",
        "input_boolean.sat_inc_frontdoor_2",
        "input_datetime.end_date_frontdoor_2",
        "input_datetime.start_date_frontdoor_2",
        "input_datetime.sun_start_date_frontdoor_2",
        "input_datetime.sun_end_date_frontdoor_2",
        "input_datetime.mon_start_date_frontdoor_2",
        "input_datetime.mon_end_date_frontdoor_2",
        "input_datetime.tue_start_date_frontdoor_2",
        "input_datetime.tue_end_date_frontdoor_2",
        "input_datetime.wed_start_date_frontdoor_2",
        "input_datetime.wed_end_date_frontdoor_2",
        "input_datetime.thu_start_date_frontdoor_2",
        "input_datetime.thu_end_date_frontdoor_2",
        "input_datetime.fri_start_date_frontdoor_2",
        "input_datetime.fri_end_date_frontdoor_2",
        "input_datetime.sat_start_date_frontdoor_2",
        "input_datetime.sat_end_date_frontdoor_2",
        "input_number.accesscount_frontdoor_2",
        "input_text.frontdoor_name_2",
        "input_text.frontdoor_pin_2",
        "input_boolean.notify_frontdoor_3",
        "input_boolean.daterange_frontdoor_3",
        "input_boolean.smtwtfs_frontdoor_3",
        "input_boolean.enabled_frontdoor_3",
        "input_boolean.accesslimit_frontdoor_3",
        "input_boolean.reset_codeslot_frontdoor_3",
        "input_boolean.sun_frontdoor_3",
        "input_boolean.mon_frontdoor_3",
        "input_boolean.tue_frontdoor_3",
        "input_boolean.wed_frontdoor_3",
        "input_boolean.thu_frontdoor_3",
        "input_boolean.fri_frontdoor_3",
        "input_boolean.sat_frontdoor_3",
        "input_boolean.sun_inc_frontdoor_3",
        "input_boolean.mon_inc_frontdoor_3",
        "input_boolean.tue_inc_frontdoor_3",
        "input_boolean.wed_inc_frontdoor_3",
        "input_boolean.thu_inc_frontdoor_3",
        "input_boolean.fri_inc_frontdoor_3",
        "input_boolean.sat_inc_frontdoor_3",
        "input_datetime.end_date_frontdoor_3",
        "input_datetime.start_date_frontdoor_3",
        "input_datetime.sun_start_date_frontdoor_3",
        "input_datetime.sun_end_date_frontdoor_3",
        "input_datetime.mon_start_date_frontdoor_3",
        "input_datetime.mon_end_date_frontdoor_3",
        "input_datetime.tue_start_date_frontdoor_3",
        "input_datetime.tue_end_date_frontdoor_3",
        "input_datetime.wed_start_date_frontdoor_3",
        "input_datetime.wed_end_date_frontdoor_3",
        "input_datetime.thu_start_date_frontdoor_3",
        "input_datetime.thu_end_date_frontdoor_3",
        "input_datetime.fri_start_date_frontdoor_3",
        "input_datetime.fri_end_date_frontdoor_3",
        "input_datetime.sat_start_date_frontdoor_3",
        "input_datetime.sat_end_date_frontdoor_3",
        "input_number.accesscount_frontdoor_3",
        "input_text.frontdoor_name_3",
        "input_text.frontdoor_pin_3",
        "input_boolean.notify_frontdoor_4",
        "input_boolean.daterange_frontdoor_4",
        "input_boolean.smtwtfs_frontdoor_4",
        "input_boolean.enabled_frontdoor_4",
        "input_boolean.accesslimit_frontdoor_4",
        "input_boolean.reset_codeslot_frontdoor_4",
        "input_boolean.sun_frontdoor_4",
        "input_boolean.mon_frontdoor_4",
        "input_boolean.tue_frontdoor_4",
        "input_boolean.wed_frontdoor_4",
        "input_boolean.thu_frontdoor_4",
        "input_boolean.fri_frontdoor_4",
        "input_boolean.sat_frontdoor_4",
        "input_boolean.sun_inc_frontdoor_4",
        "input_boolean.mon_inc_frontdoor_4",
        "input_boolean.tue_inc_frontdoor_4",
        "input_boolean.wed_inc_frontdoor_4",
        "input_boolean.thu_inc_frontdoor_4",
        "input_boolean.fri_inc_frontdoor_4",
        "input_boolean.sat_inc_frontdoor_4",
        "input_datetime.end_date_frontdoor_4",
        "input_datetime.start_date_frontdoor_4",
        "input_datetime.sun_start_date_frontdoor_4",
        "input_datetime.sun_end_date_frontdoor_4",
        "input_datetime.mon_start_date_frontdoor_4",
        "input_datetime.mon_end_date_frontdoor_4",
        "input_datetime.tue_start_date_frontdoor_4",
        "input_datetime.tue_end_date_frontdoor_4",
        "input_datetime.wed_start_date_frontdoor_4",
        "input_datetime.wed_end_date_frontdoor_4",
        "input_datetime.thu_start_date_frontdoor_4",
        "input_datetime.thu_end_date_frontdoor_4",
        "input_datetime.fri_start_date_frontdoor_4",
        "input_datetime.fri_end_date_frontdoor_4",
        "input_datetime.sat_start_date_frontdoor_4",
        "input_datetime.sat_end_date_frontdoor_4",
        "input_number.accesscount_frontdoor_4",
        "input_text.frontdoor_name_4",
        "input_text.frontdoor_pin_4",
        "input_boolean.frontdoor_lock_notifications",
        "input_boolean.frontdoor_dooraccess_notifications",
        "input_boolean.frontdoor_reset_lock",
    ]

    result = _get_entities_to_remove("frontdoor", "tests/yaml", range(1, 2), False)
    assert result == [
        "input_boolean.notify_frontdoor_1",
        "input_boolean.daterange_frontdoor_1",
        "input_boolean.smtwtfs_frontdoor_1",
        "input_boolean.enabled_frontdoor_1",
        "input_boolean.accesslimit_frontdoor_1",
        "input_boolean.reset_codeslot_frontdoor_1",
        "input_boolean.sun_frontdoor_1",
        "input_boolean.mon_frontdoor_1",
        "input_boolean.tue_frontdoor_1",
        "input_boolean.wed_frontdoor_1",
        "input_boolean.thu_frontdoor_1",
        "input_boolean.fri_frontdoor_1",
        "input_boolean.sat_frontdoor_1",
        "input_boolean.sun_inc_frontdoor_1",
        "input_boolean.mon_inc_frontdoor_1",
        "input_boolean.tue_inc_frontdoor_1",
        "input_boolean.wed_inc_frontdoor_1",
        "input_boolean.thu_inc_frontdoor_1",
        "input_boolean.fri_inc_frontdoor_1",
        "input_boolean.sat_inc_frontdoor_1",
        "input_datetime.end_date_frontdoor_1",
        "input_datetime.start_date_frontdoor_1",
        "input_datetime.sun_start_date_frontdoor_1",
        "input_datetime.sun_end_date_frontdoor_1",
        "input_datetime.mon_start_date_frontdoor_1",
        "input_datetime.mon_end_date_frontdoor_1",
        "input_datetime.tue_start_date_frontdoor_1",
        "input_datetime.tue_end_date_frontdoor_1",
        "input_datetime.wed_start_date_frontdoor_1",
        "input_datetime.wed_end_date_frontdoor_1",
        "input_datetime.thu_start_date_frontdoor_1",
        "input_datetime.thu_end_date_frontdoor_1",
        "input_datetime.fri_start_date_frontdoor_1",
        "input_datetime.fri_end_date_frontdoor_1",
        "input_datetime.sat_start_date_frontdoor_1",
        "input_datetime.sat_end_date_frontdoor_1",
        "input_number.accesscount_frontdoor_1",
        "input_text.frontdoor_name_1",
        "input_text.frontdoor_pin_1",
    ]


async def test_delete_lock_and_base_folder(
    hass,
    mock_osremove,
    mock_osrmdir,
):
    """Test delete_lock_and_base_folder"""
    entry = MockConfigEntry(
        domain=DOMAIN, title="frontdoor", data=CONFIG_DATA, version=2
    )

    entry.add_to_hass(hass)
    assert await hass.config_entries.async_setup(entry.entry_id)
    await hass.async_block_till_done()

    delete_lock_and_base_folder(hass, entry)

    assert mock_osrmdir.called
    assert mock_osremove.called
    # need to mock the path to properly test this
