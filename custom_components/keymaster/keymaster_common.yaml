## WARNING ##
# This file is auotmaticly generated, any changes
# will be overwritten.

##################################################
################  COMMON ENTITIES  ###############
##################################################

###############  input_boolean:  #################
input_boolean:
  LOCKNAME_lock_notifications:
    name: CASE_LOCK_NAME Lock Notifications
  LOCKNAME_dooraccess_notifications:
    name: CASE_LOCK_NAME Door Notifications
  LOCKNAME_reset_lock:
    name: CASE_LOCK_NAME reset lock

###################  script:  ####################
script:
  LOCKNAME_refreshnodeinfo:
    description: 'Send MQTT RefreshNodeInfo command'
    sequence:
      - service: system_log.write
        data_template:
          message: "LOCKNAME started noderefreshinfo: {{ now() }}"
          level: debug
      - service: mqtt.publish
        data:
          topic: 'OpenZWave/1/command/refreshnodeinfo/'
          payload: >-
            { "node": {{ state_attr('LOCKENTITYNAME','node_id') }} }
          retain: true

###################  automation:  ####################
automation:
  - alias: CASE_LOCK_NAME Lock Notifications
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: LOCKNAME
    condition:
      - condition: state
        entity_id: "input_boolean.keymaster_allow_automation_execution"
        state: "on"
      - condition: state
        entity_id: "input_boolean.LOCKNAME_lock_notifications"
        state: "on"
    action:
      - service: script.LOCKNAME_manual_notify
        data_template:
          title: CASE_LOCK_NAME
          message: "{{ trigger.event.data.action_text }}"

  - alias: CASE_LOCK_NAME User Notifications
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: LOCKNAME
    condition:
      - condition: state
        entity_id: "input_boolean.keymaster_allow_automation_execution"
        state: "on"
      - condition: template
        value_template: "{{ trigger.event.data.code_slot > 0 }}"
      - condition: template
        value_template: "{{ is_state('input_boolean.LOCKNAME_notify_' + trigger.event.data.code_slot | string, 'on') }}"
    action:
      - service: script.LOCKNAME_manual_notify
        data_template:
          title: CASE_LOCK_NAME
          message: "{{ trigger.event.data.action_text }} by {{ trigger.event.data.code_slot_name }}"

  - alias: CASE_LOCK_NAME Sensor Closed
    trigger:
      entity_id: DOORSENSORENTITYNAME
      platform: state
      to: "off"
    condition:
      - condition: state
        entity_id: "input_boolean.keymaster_allow_automation_execution"
        state: "on"
      - condition: state
        entity_id: "input_boolean.LOCKNAME_dooraccess_notifications"
        state: "on"
    action:
      - service: script.LOCKNAME_manual_notify
        data_template:
          title: CASE_LOCK_NAME
          message: "Closed"

  - alias: CASE_LOCK_NAME Sensor Opened
    trigger:
      entity_id: DOORSENSORENTITYNAME
      platform: state
      to: "on"
    condition:
      - condition: state
        entity_id: "input_boolean.keymaster_allow_automation_execution"
        state: "on"
      - condition: state
        entity_id: "input_boolean.LOCKNAME_dooraccess_notifications"
        state: "on"
    action:
      - service: script.LOCKNAME_manual_notify
        data_template:
          title: CASE_LOCK_NAME
          message: "Opened"

  - alias: CASE_LOCK_NAME Changed Code
    trigger:
      entity_id: INPUTLOCKPINHEADER
      platform: state
    condition:
      - condition: state
        entity_id: "input_boolean.keymaster_allow_automation_execution"
        state: "on"
      - condition: template
        value_template: >-
          {{
            is_state('input_boolean.LOCKNAME_enabled_' + trigger.entity_id.split('_')[-1], 'on')
            and
            (trigger.from_state.state != trigger.to_state.state)
          }}
    action:
      - service: persistent_notification.create
        data_template:
          title: CASE_LOCK_NAME LOCK MANAGER
          message: >-
            {{ 'You changed the PIN for code ' + trigger.entity_id.split('_')[-1] + '. Please enable it in order to make it active.'}}
      - service: input_boolean.turn_off
        data_template:
          entity_id: >-
            {{ 'input_boolean.LOCKNAME_enabled_' + trigger.entity_id.split('_')[-1] }}

  - alias: CASE_LOCK_NAME Reset
    variables:
      # Constant used to loop through resetting all code slots
      code_slots: [ALL_CODE_SLOTS]
    condition:
      - condition: state
        entity_id: "input_boolean.keymaster_allow_automation_execution"
        state: "on"
    trigger:
      entity_id: input_boolean.LOCKNAME_reset_lock
      platform: state
      from: "off"
      to: "on"
    action:
      - repeat:
          sequence:
            - service: keymaster.reset_code_slot
              data_template:
                lockname: LOCKNAME
                code_slot: "{{ code_slots[repeat.index - 1] | string }}"
          until: "{{ repeat.index == code_slots | length }}"
      - service: input_boolean.turn_off
        entity_id: input_boolean.LOCKNAME_reset_lock

  - alias: CASE_LOCK_NAME Decrement Access Count
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: LOCKNAME
    condition:
      - condition: state
        entity_id: "input_boolean.keymaster_allow_automation_execution"
        state: "on"
      - condition: template
        # make sure decrementing access entries is enabled 
        value_template: "{{ is_state('input_boolean.LOCKNAME_accesslimit_' + trigger.event.data.code_slot | string, 'on') }}"
      - condition: template
        # Check for Keypad Unlock code
        value_template: "{{ trigger.event.data.code_slot > 0 and trigger.event.data.action_code in (6, 19)}}"
    action:
      - service: input_number.decrement
        data_template:
          entity_id: "{{ 'input_number.LOCKNAME_accesscount_' + trigger.event.data.code_slot | string }}"
