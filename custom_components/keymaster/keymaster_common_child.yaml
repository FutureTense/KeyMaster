## WARNING ##
# This file is automatically generated, any changes
# will be overwritten.

##################################################
################  COMMON ENTITIES  ###############
##################################################

###################  script:  ####################
script:
  keymaster_LOCKNAME_reset_lock:
    sequence:
      - service: script.keymaster_LOCKNAME_manual_notify
        data_template:
          title: "reset"
          message: "LOCKNAME"

  keymaster_LOCKNAME_reset_codeslot:
    mode: parallel
    fields:
      code_slot:
        description: The code slot to reset
        example: 1
    variables:
      # Constant used later to loop through day specific entities
      days: ["sun", "mon", "tue", "wed", "thu", "fri", "sat"]
    sequence:
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.enabled_LOCKNAME_{{ code_slot | string }}"
      - service: input_text.set_value
        data_template:
          entity_id: "input_text.LOCKNAME_name_{{ code_slot | string }}"
          value: ""
      - service: input_text.set_value
        data_template:
          entity_id: "input_text.LOCKNAME_pin_{{ code_slot | string }}"
          value: ""
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.notify_LOCKNAME_{{ code_slot | string }}"
      - service: input_number.set_value
        data_template:
          entity_id: "input_number.accesscount_LOCKNAME_{{ code_slot | string }}"
          value: "0"
      - service: input_datetime.set_datetime
        data_template:
          entity_id: "input_datetime.start_date_LOCKNAME_{{ code_slot | string }}"
          datetime: >-
            {{ now().strftime('%Y-%m-%d 00:00') }}
      - service: input_datetime.set_datetime
        data_template:
          entity_id: "input_datetime.end_date_LOCKNAME_{{ code_slot | string }}"
          datetime: >-
            {{ now().strftime('%Y-%m-%d 00:00') }}
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.daterange_LOCKNAME_{{ code_slot | string }}"
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.accesslimit_LOCKNAME_{{ code_slot | string }}"
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.reset_codeslot_LOCKNAME_{{ code_slot | string }}"
      # Loop through each day of the week and reset the entities related to each one
      - repeat:
          count: 7
          sequence:
            - service: input_datetime.set_datetime
              data_template:
                entity_id: "input_datetime.{{ days[repeat.index - 1] }}_start_date_LOCKNAME_{{ code_slot | string }}"
                time: "{{ now().replace(hour=00,minute=00,second=00).strftime('%H:%M:%S') }}"
            - service: input_datetime.set_datetime
              data_template:
                entity_id: "input_datetime.{{ days[repeat.index - 1] }}_end_date_LOCKNAME_{{ code_slot | string }}"
                time: "{{ now().replace(hour=00,minute=00,second=00).strftime('%H:%M:%S') }}"
            - service: input_boolean.turn_on
              data_template:
                entity_id: "input_boolean.{{ days[repeat.index - 1] }}_LOCKNAME_{{ code_slot | string }}"
            - service: input_boolean.turn_on
              data_template:
                entity_id: "input_boolean.{{ days[repeat.index - 1] }}_inc_LOCKNAME_{{ code_slot | string }}"

  keymaster_LOCKNAME_start_timer:
    sequence:
      - condition: state
        entity_id: input_boolean.keymaster_LOCKNAME_autolock
        state: "on"
      - condition: state
        entity_id: LOCKENTITYNAME
        state: "unlocked"
      - service: timer.cancel
        entity_id: timer.keymaster_LOCKNAME_autolock
      - service: timer.start
        data_template: # if next_dusk happens sooner than next_dawn, then it's daylight
          entity_id: timer.keymaster_LOCKNAME_autolock
          duration: >
            {% if (((as_timestamp(states.sun.sun.attributes.next_dusk)) > (as_timestamp(states.sun.sun.attributes.next_dawn)))) %}
              {{ states('input_text.keymaster_LOCKNAME_autolock_door_time_night')}}
            {% else %}
              {{ states('input_text.keymaster_LOCKNAME_autolock_door_time_day')}}
            {% endif %}

###################  automation:  ####################
automation:
  - alias: keymaster_CASE_LOCK_NAME Reset Code Slot
    id: keymaster_CASE_LOCK_NAME Reset Code Slot
    trigger:
      entity_id: INPUT_RESET_CODE_SLOT_HEADER
      platform: state
      to: "on"
    action:
      - service: script.keymaster_LOCKNAME_reset_codeslot
        data_template:
          code_slot: "{{ trigger.entity_id.split('_')[-1] }}"

  - alias: keymaster_LOCKNAME_locked
    id: keymaster_LOCKNAME_locked
    trigger:
      entity_id: LOCKENTITYNAME
      platform: state
      to: locked
    action:
      - service: timer.cancel
        entity_id: timer.keymaster_LOCKNAME_autolock

  - alias: keymaster_LOCKNAME_opened
    id: keymaster_LOCKNAME_opened
    trigger:
      platform: state
      entity_id: DOORSENSORENTITYNAME
      to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.keymaster_LOCKNAME_autolock
        state: "on"
    action:
      - service: timer.start
        data_template:
          entity_id: timer.keymaster_LOCKNAME_autolock
          duration: >
            {% if (((as_timestamp(states.sun.sun.attributes.next_dusk)) > (as_timestamp(states.sun.sun.attributes.next_dawn)))) %}
              {{ states('input_text.keymaster_LOCKNAME_autolock_door_time_night')}}
            {% else %}
              {{ states('input_text.keymaster_LOCKNAME_autolock_door_time_day')}}
            {% endif %}

  - alias: keymaster_LOCKNAME_unlocked_start_autolock
    id: keymaster_LOCKNAME_unlocked_ start_autolock
    trigger:
      entity_id: LOCKENTITYNAME
      platform: state
      to: unlocked
    condition:
      - condition: state
        entity_id: input_boolean.keymaster_LOCKNAME_autolock
        state: "on"
    action:
      - service: script.turn_on
        entity_id: script.keymaster_LOCKNAME_start_timer
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_LOCKNAME_retry

  - alias: keymaster_LOCKNAME_timer_finished
    id: keymaster_LOCKNAME_timer_finished
    condition:
      - condition: state
        entity_id: input_boolean.keymaster_LOCKNAME_autolock
        state: "on"
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.keymaster_LOCKNAME_autolock
    action:
      - service: lock.lock
        entity_id: lock.boltchecked_LOCKNAME

  - alias: keymaster_LOCKNAME_timer_canceled
    id: keymaster_LOCKNAME_timer_canceled
    trigger:
      platform: event
      event_type: timer.cancelled
      event_data:
        entity_id: timer.keymaster_LOCKNAME_autolock
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_LOCKNAME_retry

  - alias: keymaster_LOCKNAME_disable_auto_lock
    id: keymaster_LOCKNAME_disable_auto_lock
    trigger:
      entity_id: input_boolean.keymaster_LOCKNAME_autolock
      platform: state
      to: "off"
    action:
      - service: timer.cancel
        entity_id:
          - timer.keymaster_LOCKNAME_autolock
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_LOCKNAME_retry

  - alias: keymaster_LOCKNAME_enable_auto_lock
    id: keymaster_LOCKNAME_enable_auto_lock
    trigger:
      entity_id: input_boolean.keymaster_LOCKNAME_autolock
      platform: state
      to: "on"
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.keymaster_LOCKNAME_retry
      - service: timer.cancel
        entity_id:
          - timer.keymaster_LOCKNAME_autolock
      - service: script.turn_on
        entity_id: script.keymaster_LOCKNAME_start_timer

  - alias: keymaster_LOCKNAME_initialize
    id: keymaster_LOCKNAME_initialize
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: input_text.set_value
        entity_id: input_text.keymaster_LOCKNAME_autolock_door_time_day
        data:
          value: >
            {%- set current_value=states('input_text.keymaster_LOCKNAME_autolock_door_time_day') -%}
            {{ iif(current_value in ['', 'unknown'], "02:00:00", current_value)}}
      - service: input_text.set_value
        entity_id: input_text.keymaster_LOCKNAME_autolock_door_time_night
        data:
          value: >
            {%- set current_value=states('input_text.keymaster_LOCKNAME_autolock_door_time_night') -%}
            {{ iif(current_value in ['', 'unknown'], "00:05:00", current_value)}}

###################  timer:  ####################
timer:
  keymaster_LOCKNAME_autolock:
    name: "Auto Lock Timer"
