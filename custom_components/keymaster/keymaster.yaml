
############  input_number:  #####################  
input_number:
  accesscount_LOCKNAME_TEMPLATENUM:
    name: 'Unlock events'
    min: 0
    max: 100
    step: 1
    mode: box

#################  input_datetime:  ##############  
input_datetime:
  end_date_LOCKNAME_TEMPLATENUM:
    name: 'End'
    has_time: false
    has_date: true
  start_date_LOCKNAME_TEMPLATENUM:
    name: 'Start'
    has_time: false
    has_date: true

  sun_start_date_LOCKNAME_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  sun_end_date_LOCKNAME_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  mon_start_date_LOCKNAME_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  mon_end_date_LOCKNAME_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  tue_start_date_LOCKNAME_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  tue_end_date_LOCKNAME_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  wed_start_date_LOCKNAME_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  wed_end_date_LOCKNAME_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  thu_start_date_LOCKNAME_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  thu_end_date_LOCKNAME_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  fri_start_date_LOCKNAME_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  fri_end_date_LOCKNAME_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  sat_start_date_LOCKNAME_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  sat_end_date_LOCKNAME_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false


####################  input_text:  ###############  
input_text:
  LOCKNAME_name_TEMPLATENUM:
    name: 'Name'
  LOCKNAME_pin_TEMPLATENUM:
    name: 'PIN'
    mode: HIDE_PINS

#################  input_boolean: ################  
input_boolean:
  notify_LOCKNAME_TEMPLATENUM:
    name: 'Notifications'
  daterange_LOCKNAME_TEMPLATENUM:
    name: 'Use Date Range'
  smtwtfs_LOCKNAME_TEMPLATENUM:
    name: 'Use SMTWTFS'
  enabled_LOCKNAME_TEMPLATENUM:
    name: 'Enabled'
  accesslimit_LOCKNAME_TEMPLATENUM:
    name: 'Enforce PIN limit'
    initial: off
  reset_codeslot_LOCKNAME_TEMPLATENUM:
    name: 'Reset Code Slot'
    initial: off

  sun_LOCKNAME_TEMPLATENUM:
    name: 'Sunday'
    initial: on

  mon_LOCKNAME_TEMPLATENUM:
    name: 'Monday'
    initial: on

  tue_LOCKNAME_TEMPLATENUM:
    name: 'Tuesday'
    initial: on

  wed_LOCKNAME_TEMPLATENUM:
    name: 'Wednesday'
    initial: on

  thu_LOCKNAME_TEMPLATENUM:
    name: 'Thursday'
    initial: on

  fri_LOCKNAME_TEMPLATENUM:
    name: 'Friday'
    initial: on

  sat_LOCKNAME_TEMPLATENUM:
    name: 'Saturday'
    initial: on

  sun_inc_LOCKNAME_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  mon_inc_LOCKNAME_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  tue_inc_LOCKNAME_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  wed_inc_LOCKNAME_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  thu_inc_LOCKNAME_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  fri_inc_LOCKNAME_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  sat_inc_LOCKNAME_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

################  automation: #################  
automation:

- alias: synchronize_codeslot_LOCKNAME_TEMPLATENUM
  initial_state: true
  trigger:
    - platform: state
      entity_id: "binary_sensor.pin_synched_LOCKNAME_TEMPLATENUM"
      to: 'off'
    - platform: state
      entity_id: "input_boolean.allow_automation_execution"
      to: 'on'
    - platform: state
      entity_id: "sensor.LOCKNAME_code_slot_TEMPLATENUM"
  condition:
    - condition: state
      entity_id: "input_boolean.allow_automation_execution"
      state: "on"
    - condition: state
      entity_id: "binary_sensor.pin_synched_LOCKNAME_TEMPLATENUM"
      state: "off"
    - condition: template
      value_template: >-
        {{ states("sensor.LOCKNAME_code_slot_TEMPLATENUM") != "unavailable" }}
  action:
    - choose:

        # The code should be added to the lock's slot
        - conditions:
            - condition: template
              value_template: "{{ is_state('binary_sensor.active_LOCKNAME_TEMPLATENUM','on') }}"
          sequence:
            - service: keymaster.add_code
              data_template:
                entity_id: LOCKENTITYNAME
                code_slot: >-
                  {{ TEMPLATENUM }}
                usercode: >-
                  {% set object = states('input_text.LOCKNAME_pin_TEMPLATENUM') %}
                  {{ object.strip() }}

        # The code should be removed from the lock's slot
        - conditions:
            - condition: template
              value_template: "{{ is_state('binary_sensor.active_LOCKNAME_TEMPLATENUM','off') }}"
          sequence:
            - service: keymaster.clear_code
              data_template:
                entity_id: LOCKENTITYNAME
                code_slot: >-
                  {{ TEMPLATENUM }}
          
- alias: reset_codeslot_LOCKNAME_TEMPLATENUM
  trigger:
    entity_id: input_boolean.reset_codeslot_LOCKNAME_TEMPLATENUM
    platform: state
    to: 'on'
  action:
    - service: script.reset_codeslot_LOCKNAME
      data_template:
        code_slot: TEMPLATENUM
      
################  binary_sensor: #################  
binary_sensor:

- platform: template
  sensors:

    active_LOCKNAME_TEMPLATENUM:
      friendly_name: "Desired PIN State"
      value_template: >-
        {% set smtwtfs = namespace(check=False) %}
        {% set day = strptime(states('sensor.date'), '%Y-%m-%d').strftime('%a') %}
        {% set day_check = (
          is_state('input_boolean.' + day + '_LOCKNAME_TEMPLATENUM', 'on')
          and 
          (
            (
              is_state('input_boolean.' + day + '_inc_LOCKNAME_TEMPLATENUM', 'on')
              and
              (
                states('input_datetime.' + day + '_start_date_LOCKNAME_TEMPLATENUM') == states('input_datetime.' + day + '_end_date_LOCKNAME_TEMPLATENUM')
                or
                (
                  states('sensor.time').replace(':', '') | int >= (states('input_datetime.' + day + '_start_date_LOCKNAME_TEMPLATENUM')[0:5]).replace(':', '') | int
                  and
                  states('sensor.time').replace(':', '') | int <= (states('input_datetime.' + day + '_end_date_LOCKNAME_TEMPLATENUM')[0:5]).replace(':', '') | int
                )
              )
            )
            or
            (
              is_state('input_boolean.' + day + '_inc_LOCKNAME_TEMPLATENUM', 'off')
              and
              states('sensor.time').replace(':', '') | int <= (states('input_datetime.' + day + '_start_date_LOCKNAME_TEMPLATENUM')[0:5]).replace(':', '') | int
              and
              states('sensor.time').replace(':', '') | int >= (states('input_datetime.' + day + '_end_date_LOCKNAME_TEMPLATENUM')[0:5]).replace(':', '') | int
            )
          )
        ) %}
        {% set access_count_check = (
          is_state('input_boolean.accesslimit_LOCKNAME_TEMPLATENUM', 'off')
          or
          states.input_number.accesscount_LOCKNAME_TEMPLATENUM.state|int > 0
        ) %}
        {% set in_date_range_check = (
          is_state('input_boolean.daterange_LOCKNAME_TEMPLATENUM', 'off')
          or 
          (
            states.input_datetime.start_date_LOCKNAME_TEMPLATENUM.attributes.timestamp | int | timestamp_custom('%Y%m%d', False) | int <= now().strftime('%Y%m%d') | int
            and 
            states.input_datetime.end_date_LOCKNAME_TEMPLATENUM.attributes.timestamp | int | timestamp_custom('%Y%m%d', False)| int >=  now().strftime('%Y%m%d') | int
          )
        ) %}
        {{
          is_state('input_boolean.enabled_LOCKNAME_TEMPLATENUM', 'on') and
          access_count_check
          and
          in_date_range_check
          and
          day_check
        }}

    pin_synched_LOCKNAME_TEMPLATENUM:
      friendly_name: 'PIN synchronized with lock'
      value_template: >
        {% set lockpin = states('sensor.LOCKNAME_code_slot_TEMPLATENUM')  %}
        {% if lockpin == "0000" %}
          {% set lockpin = "" %}
        {% endif %}
        {% if is_state('binary_sensor.active_LOCKNAME_TEMPLATENUM', 'on') %}
          {% set correct = states('input_text.LOCKNAME_pin_TEMPLATENUM') == lockpin %}
        {% else %}
          {% set correct = lockpin == "" %}
        {% endif %}
        {{ correct }}

###################  sensor:  ####################  
sensor:

- platform: template
  sensors:
  
    connected_LOCKNAME_TEMPLATENUM:
      # icon: mdi:glassdoor
      friendly_name: "PIN Status"
      value_template: >-
        {% set value_map = {
          'on': {
            'on': 'Connected',
            'off': 'Connecting',
          },
          'off': {
            'on': 'Disconnected',
            'off': 'Disconnecting',
          },
        } %}
        {% set slot_active = states('binary_sensor.active_LOCKNAME_TEMPLATENUM') %}
        {% set pin_synched = states('binary_sensor.pin_synched_LOCKNAME_TEMPLATENUM') %}
        {{ value_map[slot_active][pin_synched] }}
      icon_template: >
        {% set icon_map = {
          'on': {
            'on': 'mdi:folder-key',
            'off': 'mdi:folder-key-network',
          },
          'off': {
            'on': 'mdi:folder-open',
            'off': 'mdi:wiper-watch',
          },
        } %}
        {% set slot_active = states('binary_sensor.active_LOCKNAME_TEMPLATENUM') %}
        {% set pin_synched = states('binary_sensor.pin_synched_LOCKNAME_TEMPLATENUM') %}
        {{ icon_map[slot_active][pin_synched] }}