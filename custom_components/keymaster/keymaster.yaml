
############  input_number:  #####################
input_number:
  LOCKNAME_accesscount_TEMPLATENUM:
    name: 'Unlock events'
    min: 0
    max: 100
    step: 1
    mode: box

#################  input_datetime:  ##############
input_datetime:
  LOCKNAME_end_date_TEMPLATENUM:
    name: 'End'
    has_time: false
    has_date: true
  LOCKNAME_start_date_TEMPLATENUM:
    name: 'Start'
    has_time: false
    has_date: true

  LOCKNAME_sun_start_date_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  LOCKNAME_sun_end_date_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  LOCKNAME_mon_start_date_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  LOCKNAME_mon_end_date_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  LOCKNAME_tue_start_date_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  LOCKNAME_tue_end_date_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  LOCKNAME_wed_start_date_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  LOCKNAME_wed_end_date_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  LOCKNAME_thu_start_date_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  LOCKNAME_thu_end_date_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  LOCKNAME_fri_start_date_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  LOCKNAME_fri_end_date_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false

  LOCKNAME_sat_start_date_TEMPLATENUM:
    name: 'Start'
    has_time: true
    has_date: false
  LOCKNAME_sat_end_date_TEMPLATENUM:
    name: 'End'
    has_time: true
    has_date: false


####################  input_text:  ###############
input_text:
  LOCKNAME_name_TEMPLATENUM:
    name: 'Name'
  LOCKNAME_pin_TEMPLATENUM:
    name: 'PIN'
    mode: HIDE_PINS

#################  input_boolean:  ################
input_boolean:
  LOCKNAME_notify_TEMPLATENUM:
    name: 'Notifications'
  LOCKNAME_daterange_TEMPLATENUM:
    name: 'Use Date Range'
  LOCKNAME_smtwtfs_TEMPLATENUM:
    name: 'Use SMTWTFS'
  LOCKNAME_enabled_TEMPLATENUM:
    name: 'Enabled'
  LOCKNAME_accesslimit_TEMPLATENUM:
    name: 'Enforce PIN limit'
    initial: off
  LOCKNAME_reset_codeslot_TEMPLATENUM:
    name: 'Reset Code Slot'
    initial: off

  LOCKNAME_sun_TEMPLATENUM:
    name: 'Sunday'
    initial: on

  LOCKNAME_mon_TEMPLATENUM:
    name: 'Monday'
    initial: on

  LOCKNAME_tue_TEMPLATENUM:
    name: 'Tuesday'
    initial: on

  LOCKNAME_wed_TEMPLATENUM:
    name: 'Wednesday'
    initial: on

  LOCKNAME_thu_TEMPLATENUM:
    name: 'Thursday'
    initial: on

  LOCKNAME_fri_TEMPLATENUM:
    name: 'Friday'
    initial: on

  LOCKNAME_sat_TEMPLATENUM:
    name: 'Saturday'
    initial: on

  LOCKNAME_sun_inc_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  LOCKNAME_mon_inc_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  LOCKNAME_tue_inc_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  LOCKNAME_wed_inc_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  LOCKNAME_thu_inc_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  LOCKNAME_fri_inc_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

  LOCKNAME_sat_inc_TEMPLATENUM:
    name: 'include (on)/exclude (off)'
    initial: on

################  automation:  #################
automation:

- alias: LOCKNAME_synchronize_codeslot_TEMPLATENUM
  initial_state: true
  trigger:
    - platform: state
      entity_id: "binary_sensor.LOCKNAME_pin_synched_TEMPLATENUM"
      to: 'off'
    - platform: state
      entity_id: "input_boolean.keymaster_allow_automation_execution"
      to: 'on'
    - platform: state
      entity_id: "sensor.LOCKNAME_code_slot_TEMPLATENUM"
  condition:
    - condition: state
      entity_id: "input_boolean.keymaster_allow_automation_execution"
      state: "on"
    - condition: state
      entity_id: "binary_sensor.LOCKNAME_pin_synched_TEMPLATENUM"
      state: "off"
    - condition: template
      value_template: "{{ not is_state('sensor.LOCKNAME_code_slot_TEMPLATENUM', 'unavailable') }}"
  action:
    - choose:

        # The code should be added to the lock's slot
        - conditions:
            - condition: template
              value_template: "{{ is_state('binary_sensor.LOCKNAME_active_TEMPLATENUM', 'on') }}"
          sequence:
            - service: keymaster.add_code
              data_template:
                entity_id: LOCKENTITYNAME
                code_slot: "{{ TEMPLATENUM }}"
                usercode: "{{ states('input_text.LOCKNAME_pin_TEMPLATENUM').strip() }}"

        # The code should be removed from the lock's slot
        - conditions:
            - condition: template
              value_template: "{{ is_state('binary_sensor.LOCKNAME_active_TEMPLATENUM', 'off') }}"
          sequence:
            - service: keymaster.clear_code
              data_template:
                entity_id: LOCKENTITYNAME
                code_slot: "{{ TEMPLATENUM }}"
          
- alias: LOCKNAME_reset_codeslot_TEMPLATENUM
  trigger:
    entity_id: input_boolean.LOCKNAME_reset_codeslot_TEMPLATENUM
    platform: state
    to: 'on'
  action:
    - service: script.LOCKNAME_reset_codeslot
      data_template:
        code_slot: TEMPLATENUM
      
################  binary_sensor:  #################
binary_sensor:

- platform: template
  sensors:

    LOCKNAME_active_TEMPLATENUM:
      friendly_name: "Desired PIN State"
      value_template: >-
        {## This template checks whether the PIN should be considered active based on ##}
        {## all of the different ways the PIN can be conditionally enabled/disabled ##}

        {% set now = now() %}

        {% set current_day = now.strftime('%a')[0:3] | lower %}
        {% set current_date = now.strftime('%Y%m%d') | int %}
        {% set current_time = now.strftime('%H%M') | int %}

        {% set start_date = states('input_datetime.LOCKNAME_start_date_TEMPLATENUM').replace('-', '') | int %}
        {% set end_date = states('input_datetime.LOCKNAME_end_date_TEMPLATENUM').replace('-', '') | int %}
        {% set current_day_start_time = (states('input_datetime.LOCKNAME_' + current_day + '_start_date_TEMPLATENUM')[0:5]).replace(':', '') | int %}
        {% set current_day_end_time = (states('input_datetime.LOCKNAME_' + current_day + '_end_date_TEMPLATENUM')[0:5]).replace(':', '') | int %}

        {% set is_slot_active = is_state('input_boolean.LOCKNAME_enabled_TEMPLATENUM', 'on') %}
        {% set is_current_day_active = is_state('input_boolean.LOCKNAME_' + current_day + '_TEMPLATENUM', 'on') %}

        {% set is_date_range_enabled = is_state('input_boolean.LOCKNAME_daterange_TEMPLATENUM', 'on') %}
        {% set is_in_date_range = (current_date >= start_date and current_date <= end_date) %}

        {% set is_time_range_enabled = (current_day_start_time != current_day_end_time) %}
        {% set is_time_range_inclusive = is_state('input_boolean.LOCKNAME_' + current_day + '_inc_TEMPLATENUM', 'on') %}
        {% set is_in_time_range = (
          (is_time_range_inclusive and (current_time >= current_day_start_time and current_time <= current_day_end_time))
          or
          (not is_time_range_inclusive and (current_time < current_day_start_time or current_time > current_day_end_time))
        ) %}

        {% set is_access_limit_enabled = is_state('input_boolean.LOCKNAME_accesslimit_TEMPLATENUM', 'on') %}
        {% set is_access_count_valid = states('input_number.LOCKNAME_accesscount_TEMPLATENUM') | int > 0 %}

        {{
          is_slot_active and is_current_day_active
          and
          (not is_date_range_enabled or is_in_date_range)
          and
          (not is_time_range_enabled or is_in_time_range)
          and
          (not is_access_limit_enabled or is_access_count_valid)
        }}

    LOCKNAME_pin_synched_TEMPLATENUM:
      friendly_name: 'PIN synchronized with lock'
      value_template: >
        {% set lockpin = states('sensor.LOCKNAME_code_slot_TEMPLATENUM') %}
        {% if is_state('binary_sensor.LOCKNAME_active_TEMPLATENUM', 'on') %}
          {{ is_state('input_text.LOCKNAME_pin_TEMPLATENUM', lockpin) }}
        {% else %}
          {{ lockpin in ("", "0000") }}
        {% endif %}

###################  sensor:  ####################
sensor:

- platform: template
  sensors:
  
    LOCKNAME_connected_TEMPLATENUM:
      # icon: mdi:glassdoor
      friendly_name: "PIN Status"
      value_template: >-
        {% set value_map = {
          True: {
            True: 'Connected',
            False: 'Connecting',
          },
          False: {
            True: 'Disconnected',
            False: 'Disconnecting',
          },
        } %}
        {% set slot_active = is_state('binary_sensor.LOCKNAME_active_TEMPLATENUM', 'on') %}
        {% set pin_synched = is_state('binary_sensor.LOCKNAME_pin_synched_TEMPLATENUM', 'on') %}
        {{ value_map[slot_active][pin_synched] }}
      icon_template: >
        {% set icon_map = {
          True: {
            True: 'mdi:folder-key',
            False: 'mdi:folder-key-network',
          },
          False: {
            True: 'mdi:folder-open',
            False: 'mdi:wiper-watch',
          },
        } %}
        {% set slot_active = is_state('binary_sensor.LOCKNAME_active_TEMPLATENUM', 'on') %}
        {% set pin_synched = is_state('binary_sensor.LOCKNAME_pin_synched_TEMPLATENUM', 'on') %}
        {{ icon_map[slot_active][pin_synched] }}